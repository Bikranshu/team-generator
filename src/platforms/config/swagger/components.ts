import team from '../../../teams/docs';
import player from '../../../players/docs';
import event from '../../../events/docs';

/**
 * common definition schemas goes here
 */
const commonDefinitions = {
  errorSchema: {
    type: 'object',
    properties: {
      notFoundError: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
            example: 'Not Found.',
          },
          code: {
            type: 'string',
            example: '404',
          },
        },
      },
      internalServerError: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
            example: 'Internal Server Error',
          },
          code: {
            type: 'string',
            example: '500',
          },
        },
      },
      forbiddenError: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
            example: 'Forbidden',
          },
          code: {
            type: 'string',
            example: '403',
          },
        },
      },
      methodNotAllowedError: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
            example: 'Method Not Allowed',
          },
          code: {
            type: 'string',
            example: '405',
          },
        },
      },
      unAuthorizedError: {
        type: 'object',
        properties: {
          message: {
            type: 'string',
            example: 'Unauthorized',
          },
          code: {
            type: 'string',
            example: '401',
          },
        },
      },
    },
  },
};

/**
 *
 * add schemas for request, response, error body as required here
 * for defining the schema it can be defined directly here (not recommended as this file could get cluttered),
 * or export an object from a module that will define a particular schema
 */
export default {
  components: {
    schemas: {
      ...commonDefinitions,
      ...player.schemas,
      ...team.schemas,
      ...event.schemas,
    },
    securitySchemes: {
      ApiKeyAuth: {
        type: 'apiKey',
        in: 'header',
        name: 'Authorization',
        description:
          "For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header." +
          '\n\n' +
          "A valid JWT token is generated by the API and returned as answer of a call to the route '/auths/login' giving a valid email & password. " +
          '\n\n\n' +
          "The following syntax must be used in the 'Authorization' header:" +
          '\n\n' +
          'Bearer xxxxxx.yyyyyyy.zzzzzz',
      },
    },
  },
};
